{
	"info": {
		"_postman_id": "f4a97520-3e8b-48dd-ac89-08fd4d57cef6",
		"name": "notification-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "smoke-test",
			"item": [
				{
					"name": "healthcheck smoke test",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edc337c1-dda4-43ba-8f77-5d4c0743cb25",
								"exec": [
									"pm.test(\"Check if status is ok\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"ok\");",
									"})",
									"",
									"pm.test(\"Check if commit is correct\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.travis_commit).to.eql(pm.environment.get('expected-git-sha'));",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8ad90ab-f1bb-4e27-8835-1557ea299027",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notification-api-url}}/_status",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"_status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "create organization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "dc87f753-a7f7-428b-adf7-d0047e978ebe",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "edd50baf-47d4-483d-b29c-23d1935b7dc1",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"organization-id\", jsonData.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"test organization 2\",\n    \"active\": true,\n    \"organisation_type\": \"other\",\n    \"crown\": false\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/organisations",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"organisations"
					]
				}
			},
			"response": []
		},
		{
			"name": "get organisations",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "873711db-ba25-4a74-aaf6-8ddb3b269e51",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "46987d4b-8f87-41fc-9c3e-8bccad0fde6b",
						"exec": [
							"if (pm.response.code == 200) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"organization-id\", jsonData[0].id);",
							"} "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_signed}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{notification-api-url}}/organisations",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"organisations"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7dbd5c10-96f8-48c7-9350-b1f98c1d2f36",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cbc0edef-3c02-4968-b97c-d04b5b060e9f",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"user-id\", jsonData.id);",
							"} else {",
							"    var url = \"https://\" + pm.environment.get(\"notification-api-url\") + \"/user/email?email=saman.moshafi@thoughtworks.com\";",
							"    pm.sendRequest({",
							"        url: url,",
							"        method: 'GET',",
							"        header: 'authorization: Bearer ' + pm.environment.get(\"jwt_signed\"),",
							"    }, function (err, res) {",
							"        pm.environment.set(\"user-id\", res.json().data.id);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test User\",\n    \"password\": \"JDJiJDEwJDRFSXJaTVhXdzQ2UjRlVlJBU0ZMdXVtWXlXbXlRWXl3YlpnVllSbDNsMTZ4bE40NzdZYnE2\",\n    \"email_address\": \"saman.moshafi@thoughtworks.com\",\n    \"mobile_number\": \"+17035017710\",\n    \"state\": \"active\",\n    \"user_permissions\": [\n        \"manage_templates\",\n        \"send_texts\",\n        \"manage_settings\",\n        \"send_emails\",\n        \"manage_api_keys\"\n    ],\n    \"auth_type\": \"sms_auth\"\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/user",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6765b7d7-7551-4ba1-9c2f-e75512ebd2a4",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6736db40-ca2f-4fba-b081-1a58dc8c3c17",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"user-id\", jsonData.id);",
							"} else {",
							"    var url = \"https://\" + pm.environment.get(\"notification-api-url\") + \"/user/email?email=saman.moshafi@thoughtworks.com\";",
							"    pm.sendRequest({",
							"        url: url,",
							"        method: 'GET',",
							"        header: 'authorization: Bearer ' + pm.environment.get(\"jwt_signed\"),",
							"    }, function (err, res) {",
							"        pm.environment.set(\"user-id\", res.json().data.id);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test User\",\n    \"password\": \"JDJiJDEwJDRFSXJaTVhXdzQ2UjRlVlJBU0ZMdXVtWXlXbXlRWXl3YlpnVllSbDNsMTZ4bE40NzdZYnE2\",\n    \"email_address\": \"saman.moshafi@thoughtworks.com\",\n    \"mobile_number\": \"+17035017710\",\n    \"state\": \"active\",\n    \"user_permissions\": [\n        \"manage_templates\",\n        \"send_texts\",\n        \"manage_settings\",\n        \"send_emails\",\n        \"manage_api_keys\"\n    ],\n    \"auth_type\": \"sms_auth\"\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/user",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2c1a7405-9aea-440c-8003-6494fa852d91",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bbe583b1-ad47-4b2e-ab37-71245962c2f9",
						"exec": [
							"if (pm.response.code == 200) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"user-id\", jsonData[0].id);",
							"} "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{notification-api-url}}/user",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "create service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5f861c8d-2c75-404f-81e8-828b338bbcab",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3660d5c8-d47a-4eee-b7e3-9392d463a240",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"service-id\", jsonData.id);",
							"} else {",
							"    var url = \"https://\" + pm.environment.get(\"notification-api-url\") + \"/service/find-services-by-name?service_name=main service\";",
							"    pm.sendRequest({",
							"        url: url,",
							"        method: 'GET',",
							"        header: 'authorization: Bearer ' + pm.environment.get(\"jwt_signed\"),",
							"    }, function (err, res) {",
							"        pm.environment.set(\"service-id\", res.json().data[0].id);",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"main service for Govdelivery\",\n    \"user_id\": \"{{user-id}}\",\n    \"organisation_id\": \"{{organization-id}}\",\n    \"message_limit\": 1000,\n    \"restricted\": false,\n    \"active\": true,\n    \"created_by\": \"{{user-id}}\"\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/service",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"service"
					]
				}
			},
			"response": []
		},
		{
			"name": "update service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bdda4fc8-9adf-4e7e-a11d-86d9c9cc87d7",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d9d44d39-a1b4-4832-9dcf-0ded9c12240b",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"service-id\", jsonData.id);",
							"} else {",
							"    var url = \"https://\" + pm.environment.get(\"notification-api-url\") + \"/service/find-services-by-name?service_name=main service\";",
							"    pm.sendRequest({",
							"        url: url,",
							"        method: 'GET',",
							"        header: 'authorization: Bearer ' + pm.environment.get(\"jwt_signed\"),",
							"    }, function (err, res) {",
							"        pm.environment.set(\"service-id\", res.json().data[0].id);",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"main service for Govdelivery\",\n    \"user_id\": \"{{user-id}}\",\n    \"organisation_id\": \"{{organization-id}}\",\n    \"message_limit\": 1000,\n    \"restricted\": false,\n    \"active\": true,\n    \"email-from\": \"{{email-from}}\",\n    \"created_by\": \"{{user-id}}\"\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/service",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"service"
					]
				}
			},
			"response": []
		},
		{
			"name": "get services",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d0d78fb5-539c-4ca4-bcb2-2ae6db8c8185",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{notification-api-url}}/service",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"service"
					]
				}
			},
			"response": []
		},
		{
			"name": "create sms template",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "45387f36-bc89-49b5-8547-849711485df6",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "70354567-9ee7-4218-8318-12826de5b836",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"template-id\", jsonData.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"test template\",\n    \"subject\": \"test subject\",\n    \"template_type\": \"sms\",\n    \"content\": \"This is a test SMS message\",\n    \"service\": \"{{service-id}}\",\n    \"created_by\": \"{{user-id}}\"\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/service/{{service-id}}/template",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"template"
					]
				}
			},
			"response": []
		},
		{
			"name": "create email template",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1471a031-bfec-4d0d-b51c-bd9673ca014b",
						"exec": [
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "05c30269-6d48-48ab-8d0e-de8db11c34f5",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"template-id\", jsonData.data.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"test template\",\n    \"subject\": \"test subject\",\n    \"template_type\": \"email\",\n    \"content\": \"This is a test email\",\n    \"service\": \"{{service-id}}\",\n    \"created_by\": \"{{user-id}}\"\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/service/{{service-id}}/template",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"template"
					]
				}
			},
			"response": []
		},
		{
			"name": "update template",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d8f4bb7f-1228-4d28-a03d-4999e6b974e1",
						"type": "text/javascript",
						"exec": [
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5a5ffed3-9c80-4629-89b2-f1818af77563",
						"type": "text/javascript",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"template-id\", jsonData.data.id);",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"some name\",\n    \"subject\": \"some subject\",\n    \"template_type\": \"email\",\n    \"content\": \"some content\",\n    \"service\": \"{{service-id}}\",\n    \"created_by\": \"{{user-id}}\"\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/service/{{service-id}}/template/{{template-id}}",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"template",
						"{{template-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get templates for service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1790b9c7-dc03-4162-808f-1c464f958269",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d7506688-c466-4b98-86f4-13a261d8f328",
						"exec": [
							"if (pm.response.code == 200) {",
							"    var jsonData = pm.response.json(); ",
							"    var form526Template = jsonData.data.find(template => template.name === \"Form 526 submission confirmation\")",
							"    pm.environment.set(\"template-id\", form526Template ? form526Template.id : jsonData.data[0].id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{notification-api-url}}/service/{{service-id}}/template",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"template"
					]
				}
			},
			"response": []
		},
		{
			"name": "create api key",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c7b439de-a666-49a0-becc-f3b91566f7d5",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a2bff6a3-245d-452a-be1b-9dc5119656e6",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"service-api-key\", jsonData.data);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"created_by\": \"{{user-id}}\",\n    \"key_type\": \"normal\",\n    \"name\": \"postmantestapikey\"\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/service/{{service-id}}/api-key",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"api-key"
					]
				}
			},
			"response": []
		},
		{
			"name": "revoke api key",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7ac5bc3c-2c8e-4272-8c43-9d79d8466ca3",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{notification-api-url}}/service/{{service-id}}/api-key/revoke/{{api-key-id}}",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"api-key",
						"revoke",
						"{{api-key-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get api keys for service",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "25a30340-a178-4872-930d-979d2ae7c741",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
							"\t'iat': currentTimestamp,",
							"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
							"\t'jti': 'jwt_nonce'",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)",
							"console.log('Signed and encoded JWT', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ab6486e7-61f6-43f0-92fe-fdf90064ff00",
						"exec": [
							"if (pm.response.code == 200) {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set(\"api-key-id\", jsonData.apiKeys.find(apiKey => apiKey.expiry_date === null).id);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_signed}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{notification-api-url}}/service/{{service-id}}/api-keys",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"service",
						"{{service-id}}",
						"api-keys"
					]
				}
			},
			"response": []
		},
		{
			"name": "send sms with phone_number",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b4ef904b-1e04-4dfb-b0f7-fb021c6abeb5",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get(\"service-api-key\");",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"service-id\"),",
							"\t'iat': currentTimestamp",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ff667e08-9628-473b-a520-26cd485ad8bc",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"notification-id\", jsonData.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_signed}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"template_id\": \"{{template-id}}\",\n    \"phone_number\": \"+17035017710\"\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/v2/notifications/sms",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"v2",
						"notifications",
						"sms"
					]
				},
				"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
			},
			"response": []
		},
		{
			"name": "send sms with recipient_identifier",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "772b79fb-9129-4ad5-b04e-7b8690f26407",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get(\"service-api-key\");",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"service-id\"),",
							"\t'iat': currentTimestamp",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4904ddc2-f74e-4ce1-b47c-4ef5625f3da2",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"notification-id\", jsonData.id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{jwt_signed}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"template_id\": \"{{template-id}}\",\n    \"recipient_identifier\": {\n        \"id_type\": \"VAPROFILEID\",\n        \"id_value\": \"example\"\n    }\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/v2/notifications/sms",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"v2",
						"notifications",
						"sms"
					]
				},
				"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
			},
			"response": []
		},
		{
			"name": "send email with email_address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "74d0b9b4-60b9-4168-83bc-84840802c1c8",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get(\"service-api-key\");",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"service-id\"),",
							"\t'iat': currentTimestamp",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "213b5ba9-3a4c-42fc-819e-2975548222e6",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"notification-id\", jsonData.id);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_signed}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"template_id\": \"{{template-id}}\",\n    \"email_address\": \"test@email.com\"\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/v2/notifications/email",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"v2",
						"notifications",
						"email"
					]
				},
				"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
			},
			"response": []
		},
		{
			"name": "send email with recipient_identifier",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6c0e1695-f8b5-47fd-a751-d4534d4f7f49",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get(\"service-api-key\");",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"service-id\"),",
							"\t'iat': currentTimestamp",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b34ec56c-2704-41b5-96aa-b11c24342d5b",
						"exec": [
							"if (pm.response.code == 201) {",
							"    var jsonData = pm.response.json(); ",
							"    pm.environment.set(\"notification-id\", jsonData.id);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_signed}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"template_id\": \"{{template-id}}\",\n    \"recipient_identifier\": {\n        \"id_type\": \"VAPROFILEID\",\n        \"id_value\": \"example\"\n    }\n}"
				},
				"url": {
					"raw": "https://{{notification-api-url}}/v2/notifications/email",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"v2",
						"notifications",
						"email"
					]
				},
				"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
			},
			"response": []
		},
		{
			"name": "notification status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fd9a561b-8d6c-4164-8792-dc14c1a56129",
						"type": "text/javascript",
						"exec": [
							"// JWT generation script adapted from",
							"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
							"",
							"var jwtSecret = pm.environment.get(\"service-api-key\");",
							"",
							"// Set headers for JWT",
							"var header = {",
							"\t'typ': 'JWT',",
							"\t'alg': 'HS256'",
							"};",
							"",
							"// Prepare timestamp in seconds",
							"var currentTimestamp = Math.floor(Date.now() / 1000)",
							"",
							"var data = {",
							"\t'iss': pm.environment.get(\"service-id\"),",
							"\t'iat': currentTimestamp",
							"}",
							"",
							"",
							"function base64url(source) {",
							"    // Encode in classical base64",
							"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
							"    ",
							"    // Remove padding equal characters",
							"    encodedSource = encodedSource.replace(/=+$/, '')",
							"    ",
							"    // Replace characters according to base64url specifications",
							"    encodedSource = encodedSource.replace(/\\+/g, '-')",
							"    encodedSource = encodedSource.replace(/\\//g, '_')",
							"    ",
							"    return encodedSource",
							"}",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
							"var encodedHeader = base64url(stringifiedHeader)",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
							"var encodedData = base64url(stringifiedData)",
							"",
							"// build token",
							"var token = `${encodedHeader}.${encodedData}`",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
							"signature = base64url(signature)",
							"var signedToken = `${token}.${signature}`",
							"",
							"pm.environment.set('jwt_signed', signedToken)"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_signed}}"
					}
				],
				"url": {
					"raw": "https://{{notification-api-url}}/v2/notifications/{{notification-id}}",
					"protocol": "https",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"v2",
						"notifications",
						"{{notification-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "healthcheck",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{notification-api-url}}/_status",
					"host": [
						"{{notification-api-url}}"
					],
					"path": [
						"_status"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}