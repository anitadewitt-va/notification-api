name: Twistlock

on:
  workflow_dispatch:
    inputs:
      imageTag:
        description: 'Docker image tag to scna'
        required: true

jobs:
  trigger:
    runs-on: ubuntu-latest
    steps:
      - name: Configure VAEC AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VAEC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VAEC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.VAEC_DEPLOY_ROLE }}
          role-skip-session-tagging: true
          role-duration-seconds: 900

      - name: Login to VAEC ECR
        id: login-ecr-vaec
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Perofrm twistlock scan
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-vaec.outputs.registry }}
          IMAGE_REPOSITORY: "notification_api"
          IMAGE_TAG: ${{ github.event.inputs.imageTag }}
        run: |
          INSTANCE_ID=$(aws ssm get-parameter --name /utility/twistlock/instance | jq '.Parameter.Value' -r)
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids $INSTANCE_ID \
            --parameters '{"commands":[
                "#!/bin/bash",
                "aws --region us-gov-west-1 ecr get-login-password | docker login --username AWS --password-stdin '"$ECR_REGISTRY"' 2>/dev/null",
                "docker pull '"$ECR_REGISTRY"'/'"$IMAGE_REPOSITORY"':'"$IMAGE_TAG"'",
                "docker logout '"$ECR_REGISTRY"'",
                "export TWISTLOCK_PASSWORD=$(aws --region us-gov-west-1 ssm get-parameter --name /utility/twistlock/vanotify-ci-user-password --with-decryption | jq '.Parameter.Value' -r)",
                "twistcli images scan --project VaNotify --address https://twistlock.devops.va.gov --user vanotify-ci-user '"$ECR_REGISTRY"'/'"$IMAGE_REPOSITORY"':'"$IMAGE_TAG"'"
              ]}' \
            --output text --query "Command.CommandId")
          aws ssm wait command-executed --command-id $COMMAND_ID --instance-id $INSTANCE_ID ; \
            aws ssm list-command-invocations \
              --command-id $COMMAND_ID \
              --details \
              --query "CommandInvocations[].CommandPlugins[].{Status:Status,StatusDetails:StatusDetails,ResponseCode:ResponseCode,Output:Output}"